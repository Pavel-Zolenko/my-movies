{"version":3,"file":"static/js/387.8032fe21.chunk.js","mappings":"uRAEaA,EAAOC,EAAAA,EAAAA,GAAH,6HAQJC,EAAOD,EAAAA,EAAAA,GAAH,0FAKJE,EAAOF,EAAAA,EAAAA,EAAH,8GAOJG,EAAYH,EAAAA,EAAAA,EAAH,4C,SCdP,SAASI,IACtB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACMC,GAASC,EAAAA,EAAAA,MACf,GAAoCJ,EAAAA,EAAAA,WAAS,GAA7C,eAAOK,EAAP,KAAmBC,EAAnB,KAEMC,GAAOC,EAAAA,EAAAA,GAAE,QAYf,OAVAC,EAAAA,EAAAA,YAAU,WACRH,GAAc,IACdI,EAAAA,EAAAA,IAAcP,EAAOQ,GAAIJ,GACtBK,MAAK,SAAAC,GACJX,EAAQW,EAAKZ,KACd,IACAa,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAhB,IACXG,QAAQZ,GAAc,GAC1B,GAAE,CAACH,EAAOQ,GAAIJ,KAGb,gCACGF,IAAc,SAACc,EAAA,EAAD,KACf,SAACzB,EAAD,UACGO,EAAKmB,KAAI,SAAAC,GAAK,OACb,UAACzB,EAAD,YACE,gBACE0B,MAAO,IACPC,IACEF,EAAMG,aAAN,0CACuCH,EAAMG,cACzCC,EAENC,IAAKL,EAAMM,QAEb,SAAC9B,EAAD,UAAOwB,EAAMM,QACb,UAAC7B,EAAD,yBAAuBuB,EAAMO,eAXpBP,EAAMQ,QADJ,QAkBtB,C,0NC7CKC,EAAWC,+BACXC,EAAUD,mCAEVE,EAAW,mCAAG,WAAOC,EAAM3B,GAAb,uFACK4B,EAAAA,EAAAA,IAAA,UAClBL,EADkB,qCACmBE,EADnB,qBACuCzB,EADvC,iBACoD2B,IAFzD,cACZE,EADY,yBAIXA,EAASvB,MAJE,2CAAH,wDAOXwB,EAAc,mCAAG,WAAO1B,EAAIJ,GAAX,uFACE4B,EAAAA,EAAAA,IAAA,UAClBL,EADkB,kBACAnB,EADA,oBACcqB,EADd,qBACkCzB,IAFpC,cACf6B,EADe,yBAIdA,EAASvB,MAJK,2CAAH,wDAOdyB,EAAgB,mCAAG,WAAO3B,EAAIJ,GAAX,uFACA4B,EAAAA,EAAAA,IAAA,UAClBL,EADkB,kBACAnB,EADA,4BACsBqB,EADtB,qBAC0CzB,EAD1C,YADA,cACjB6B,EADiB,yBAIhBA,EAASvB,MAJO,2CAAH,wDAOhBH,EAAa,mCAAG,WAAOC,EAAIJ,GAAX,uFACG4B,EAAAA,EAAAA,IAAA,UAClBL,EADkB,kBACAnB,EADA,4BACsBqB,EADtB,qBAC0CzB,IAF7C,cACd6B,EADc,yBAIbA,EAASvB,MAJI,2CAAH,wDAOb0B,EAAiB,mCAAG,WAAO5B,EAAIJ,GAAX,uFACD4B,EAAAA,EAAAA,IAAA,UAClBL,EADkB,kBACAnB,EADA,2BACqBqB,EADrB,qBACyCzB,IAFxC,cAClB6B,EADkB,yBAIjBA,EAASvB,MAJQ,2CAAH,wDAOjB2B,EAAW,mCAAG,WAAOC,EAAOlC,GAAd,uFACK4B,EAAAA,EAAAA,IAAA,UAClBL,EADkB,iCACeE,EADf,kBACgCS,EADhC,qBACkDlC,EADlD,yBADL,cACZ6B,EADY,yBAIXA,EAASvB,MAJE,2CAAH,uD","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","services/api.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  gap: 15px;\n  list-style: none;\n`;\n\nexport const Item = styled.li`\n  width: 120px;\n  box-shadow: 0 0 8px rgba(200, 200, 200, 0.8);\n`;\n\nexport const Name = styled.p`\n  margin-top: 10px;\n  margin-bottom: 10px;\n  font-size: 16px;\n  font-weight: 700;\n`;\n\nexport const Character = styled.p`\n  font-size: 14px;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { t } from 'i18next';\nimport { fetchCastById } from 'services/api';\nimport imageplaceholder from 'images/noposter.jpg';\nimport Loader from 'components/Loader/Loader';\nimport { List, Item, Name, Character } from 'components/Cast/Cast.styled';\n\nexport default function Cast() {\n  const [cast, setCast] = useState([]);\n  const params = useParams();\n  const [showLoader, setShowLoader] = useState(false);\n\n  const lang = t('lang');\n\n  useEffect(() => {\n    setShowLoader(true);\n    fetchCastById(params.id, lang)\n      .then(data => {\n        setCast(data.cast);\n      })\n      .catch(error => console.log(error))\n      .finally(setShowLoader(false));\n  }, [params.id, lang]);\n\n  return (\n    <>\n      {showLoader && <Loader />}\n      <List>\n        {cast.map(elems => (\n          <Item key={elems.cast_id}>\n            <img\n              width={120}\n              src={\n                elems.profile_path\n                  ? `https://image.tmdb.org/t/p/w200/${elems.profile_path}`\n                  : imageplaceholder\n              }\n              alt={elems.name}\n            />\n            <Name>{elems.name}</Name>\n            <Character>Character: {elems.character}</Character>\n          </Item>\n        ))}\n      </List>\n    </>\n  );\n}\n","import axios from 'axios';\n\nconst MAIN_URL = process.env.REACT_APP_MAIN_URL;\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\nconst fetchTrends = async (page, lang) => {\n  const response = await axios.get(\n    `${MAIN_URL}/trending/all/day?api_key=${API_KEY}&language=${lang}&page=${page}`\n  );\n  return response.data;\n};\n\nconst fetchMovieById = async (id, lang) => {\n  const response = await axios.get(\n    `${MAIN_URL}/movie/${id}?api_key=${API_KEY}&language=${lang}`\n  );\n  return response.data;\n};\n\nconst fetchReviewsById = async (id, lang) => {\n  const response = await axios.get(\n    `${MAIN_URL}/movie/${id}/reviews?api_key=${API_KEY}&language=${lang}&page=1`\n  );\n  return response.data;\n};\n\nconst fetchCastById = async (id, lang) => {\n  const response = await axios.get(\n    `${MAIN_URL}/movie/${id}/credits?api_key=${API_KEY}&language=${lang}`\n  );\n  return response.data;\n};\n\nconst fetchMovieTrailer = async (id, lang) => {\n  const response = await axios.get(\n    `${MAIN_URL}/movie/${id}/videos?api_key=${API_KEY}&language=${lang}`\n  );\n  return response.data;\n};\n\nconst fetchMovies = async (query, lang) => {\n  const response = await axios.get(\n    `${MAIN_URL}/search/movie?api_key=${API_KEY}&query=${query}&language=${lang}&include_adult=false`\n  );\n  return response.data;\n};\n\nexport {\n  fetchTrends,\n  fetchMovieById,\n  fetchReviewsById,\n  fetchCastById,\n  fetchMovieTrailer,\n  fetchMovies,\n};\n"],"names":["List","styled","Item","Name","Character","Cast","useState","cast","setCast","params","useParams","showLoader","setShowLoader","lang","t","useEffect","fetchCastById","id","then","data","catch","error","console","log","finally","Loader","map","elems","width","src","profile_path","imageplaceholder","alt","name","character","cast_id","MAIN_URL","process","API_KEY","fetchTrends","page","axios","response","fetchMovieById","fetchReviewsById","fetchMovieTrailer","fetchMovies","query"],"sourceRoot":""}